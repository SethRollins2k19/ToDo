{"version":3,"sources":["components/TodoItem.js","containers/TodoContainer.js","actions/todoAction.js","components/TodoList.js","App.js","serviceWorker.js","reducers/helpers/filterHelpers.js","reducers/todoReducer.js","index.js"],"names":["TodoItem","item","deleteFunc","compFunc","id","text","isCompleted","className","onClick","connect","state","todoReducer","todoItems","filteredItems","dispatch","addClick","type","completed","addTodo","delClick","delTodo","completeTodo","changeAll","handleFilter","event","a","target","value","checked","name","filterChange","document","querySelector","map","index","key","onChange","htmlFor","App","TodoContainer","Boolean","window","location","hostname","match","filterHelper","items","filter","sortedItems","isAll","combineReducers","action","length","store","createStore","rootReducer","applyMiddleware","thunkMiddleware","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.92993d0b.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nexport const TodoItem = ({item,deleteFunc, compFunc})=>{\r\n    const {id,text,isCompleted} = item\r\n    return (\r\n        <div className={`todo-list__item ${isCompleted=== true ? \"todo-list__item--comp\" : null }`}>\r\n            <p className=\"todo-list__id\">{id}</p>\r\n            <p className=\"todo-list__text\">{text}</p>\r\n            <button onClick={deleteFunc}>delete</button>\r\n            <button onClick={compFunc}>{isCompleted === false ? \"Completed\" : \"Uncompleted\"}</button>\r\n        </div>\r\n    )\r\n}\r\n","import {connect} from 'react-redux'\r\nimport {TodoList} from \"../components/TodoList\";\r\nimport {addTodo, completeTodo, defaultFilter, delTodo, filter, filterChange} from \"../actions/todoAction\";\r\n\r\n\r\nconst mapStateToProps = (state)=>{\r\n    const { todoReducer} = state\r\n    return {\r\n        todoItems: [...todoReducer.filteredItems]\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        addClick: (text) => {\r\n            dispatch(addTodo(text))\r\n            dispatch(filter())\r\n\r\n        },\r\n        delClick: (id) => {\r\n            dispatch(delTodo(id))\r\n            dispatch(filter())\r\n\r\n        },\r\n        compFunc: (id) => {\r\n            dispatch(completeTodo(id))\r\n            dispatch(filter())\r\n        },\r\n        changeAll: ()=>dispatch(defaultFilter()),\r\n        handleFilter: (event) => dispatch(filterChange(event))\r\n    }\r\n}\r\n\r\n\r\n\r\nexport  default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TodoList)\r\n","export const addTodo = text =>{\r\n    return {\r\n        type: \"ADD_TODO\",\r\n        text: text,\r\n        completed: false\r\n    }\r\n}\r\nexport const completeTodo = id =>{\r\n    return {\r\n        type: \"COMPLETED\",\r\n        id: id\r\n    }\r\n}\r\n\r\nexport const delTodo = id => {\r\n    return {\r\n        type: \"DELETE_TODO\",\r\n        id: id\r\n    }\r\n}\r\n\r\n\r\nexport const filter = ()=>{\r\n    return {\r\n        type: \"FILTER\"\r\n    }\r\n}\r\nexport const defaultFilter = ()=> ({\r\n    type: \"FILTER_ALL\"\r\n})\r\nexport const  filterChange = (event) => async dispatch => {\r\n    let target = event.target\r\n    let value = target.type === \"checkbox\" ? target.checked : target.value\r\n    let name = target.name\r\n    await dispatch({\r\n        type: \"FILTER_ONCHANGE\",\r\n        name,\r\n        value\r\n    })\r\n    await dispatch({type: \"FILTER\"})\r\n}","import React from \"react\"\r\nimport {TodoItem} from \"./TodoItem\";\r\nimport '../style/todoStyle.css'\r\n\r\nexport const TodoList = ({todoItems,addClick,delClick,compFunc,handleFilter,changeAll})=>{\r\n\r\n    return (\r\n        <div className=\"todo-list\">\r\n            <div className=\"todo-list__control\">\r\n                <input type=\"text\" className=\"todo-list__input\" />\r\n                <button onClick={()=>{\r\n                    if(document.querySelector('.todo-list__input').value !== \"\") {\r\n                        addClick(document.querySelector('.todo-list__input').value)\r\n                        document.querySelector('.todo-list__input').value = \"\"\r\n                    }\r\n                }}>enter</button>\r\n            </div>\r\n            {todoItems.map((item,index)=>{\r\n                return <TodoItem key={index} item={item} deleteFunc={()=>{delClick(item.id)}} compFunc={()=>compFunc(item.id)}/>\r\n            })}\r\n            <div className=\"filter\">\r\n             <div>\r\n                <input id=\"completed\" type=\"checkbox\" className=\"todo-list__input\" onChange={handleFilter} name={\"isCompleted\"}/>\r\n                <label htmlFor=\"completed\">Completed</label>\r\n             </div>\r\n                <button id=\"all\" type=\"button\" className=\"todo-list__input\" onClick={changeAll} name={\"isAll\"}>all</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport TodoContainer from \"./containers/TodoContainer\";\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n        <TodoContainer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const filterHelper = (state) => {\r\n    const {items, filter} = state\r\n\r\n    let sortedItems = [...items]\r\n    for(let key in filter) {\r\n        if(filter.isAll === true) return sortedItems\r\n        if(key === \"isAll\") continue\r\n        sortedItems = sortedItems.filter(item=>item[key] === filter[key])\r\n    }\r\n    return sortedItems\r\n}","import {combineReducers} from \"redux\"\r\nimport {filterHelper} from \"./helpers/filterHelpers\";\r\n\r\n\r\nconst todoReducer = (state={\r\n    items: [],\r\n    filteredItems: [],\r\n    filter: {\r\n        isAll: true,\r\n        isCompleted: false\r\n    }\r\n},action)=>{\r\n    switch (action.type) {\r\n        case \"ADD_TODO\": {\r\n            return {\r\n                ...state,\r\n                items: [...state.items, {\r\n                    id: state.items.length === 0 ? 1 : state.items[state.items.length - 1].id + 1,\r\n                    text: action.text,\r\n                    isCompleted: false\r\n                }]\r\n            }\r\n\r\n        }\r\n        case \"DELETE_TODO\":{\r\n            return {\r\n                ...state,\r\n                items: state.items.filter(item=>item.id!==action.id).map((item,index)=>{\r\n                    item.id = index + 1\r\n                    return item\r\n                })\r\n            }\r\n        }\r\n        case \"COMPLETED\": {\r\n            return {\r\n                ...state,\r\n                items: [...state.items.map((item)=>{\r\n                    if(item.id === action.id){\r\n                        item.isCompleted = !item.isCompleted\r\n                    }\r\n                    return item\r\n                })]\r\n            }\r\n        }\r\n        case \"FILTER_ONCHANGE\": {\r\n            return {\r\n                ...state,\r\n                filter: {\r\n                    ...state.filter,\r\n                    isAll: false,\r\n                    [action.name]: action.value\r\n                }\r\n            }\r\n        }\r\n        case \"FILTER\": {\r\n            return {\r\n                ...state,\r\n                filteredItems: filterHelper(state)\r\n            }\r\n        }\r\n        case \"FILTER_ALL\":{\r\n            return {\r\n                ...state,\r\n                filteredItems: [...state.items],\r\n                filter: {\r\n                    ...state.filter,\r\n                    isAll: true\r\n                }\r\n            }\r\n        }\r\n        default: return  state\r\n    }\r\n}\r\n\r\n// const filterReducer = (state = {completed: false}, action)=>{\r\n//     switch (action.type) {\r\n//         case \"FILTER_ONCHANGE\": {\r\n//             return {\r\n//                 ...state,\r\n//                 completed: !state.completed\r\n//             }\r\n//         }\r\n//         case \"FILTER\": {\r\n//             return {\r\n//                 ...state,\r\n//\r\n//             }\r\n//         }\r\n//         default: return  state\r\n//     }\r\n// }\r\n\r\nexport default combineReducers({\r\n    todoReducer\r\n})\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport rootReducer from \"./reducers/todoReducer\";\n\nconst store = createStore(rootReducer,applyMiddleware(thunkMiddleware))\n\nReactDOM.render(\n    <Provider store={store}>\n            <App/>\n    </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}